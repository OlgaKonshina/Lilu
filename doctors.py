import pandas as pd
import streamlit as st
from typing import List, Dict, Tuple
import re


class DoctorMatcher:
    def __init__(self, csv_path='all_doctors.csv'):
        self.csv_path = csv_path
        self.df = self.load_data()

    def load_data(self) -> pd.DataFrame:
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –≤—Ä–∞—á–µ–π –∏–∑ CSV"""
        try:
            df = pd.read_csv(self.csv_path)
            st.success(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} –≤—Ä–∞—á–µ–π –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return df
        except FileNotFoundError:
            st.error("‚ùå –§–∞–π–ª doctors.csv –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return pd.DataFrame()

    def preprocess_specialties(self, specialties_text):
        """–û—á–∏—Å—Ç–∫–∞ –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π"""
        if pd.isna(specialties_text):
            return []
        # –£–±–∏—Ä–∞–µ–º HTML —Ç–µ–≥–∏, –ø—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É, —Ä–∞–∑–±–∏–≤–∞–µ–º –ø–æ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—è–º
        clean_text = re.sub('<[^<]+?>', '', str(specialties_text))
        specialties = [spec.strip().lower() for spec in re.split(',|;|–∏', clean_text) if spec.strip()]
        return specialties

    def filter_by_specialty(self, target_specialty: str) -> pd.DataFrame:
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"""
        if self.df.empty:
            return pd.DataFrame()

        target_specialty = target_specialty.lower()
        filtered_doctors = []

        for _, doctor in self.df.iterrows():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—É—é —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å
            spec_match = False
            if not pd.isna(doctor.get('spec')):
                spec_match = target_specialty in doctor['spec'].lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—É—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
            doctor_spec_match = False
            if not pd.isna(doctor.get('doctor_specialization')):
                doctor_spec_match = target_specialty in doctor['doctor_specialization'].lower()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–∏—Å–æ–∫ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–π
            specialties_match = False
            if not pd.isna(doctor.get('specialities')):
                specialties = self.preprocess_specialties(doctor['specialities'])
                specialties_match = any(target_specialty in spec for spec in specialties)

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ—Ç–∞–ª—å–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ
            detail_match = False
            if not pd.isna(doctor.get('detail_text')):
                detail_match = target_specialty in doctor['detail_text'].lower()

            if spec_match or doctor_spec_match or specialties_match or detail_match:
                filtered_doctors.append(doctor)

        return pd.DataFrame(filtered_doctors)

    def prepare_doctor_profile(self, doctor) -> str:
        """–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä–∞—á–∞ –¥–ª—è LLM"""
        profile = f"–í—Ä–∞—á: {doctor.get('name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"

        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        if not pd.isna(doctor.get('spec')):
            profile += f"–°–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å: {doctor['spec']}\n"

        if not pd.isna(doctor.get('doctor_specialization')):
            profile += f"–ö–ª—é—á–µ–≤–∞—è —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {doctor['doctor_specialization']}\n"

        if not pd.isna(doctor.get('specialities')):
            specialties = self.preprocess_specialties(doctor['specialities'])
            if specialties:
                profile += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {', '.join(specialties)}\n"

        # –ö–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏—è
        if not pd.isna(doctor.get('doctor_category')):
            profile += f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {doctor['doctor_category']}\n"

        if not pd.isna(doctor.get('degree')) and doctor['degree'] != 'none':
            profile += f"–£—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å: {doctor['degree']}\n"

        if not pd.isna(doctor.get('gender')):
            profile += f"–ü–æ–ª: {doctor['gender']}\n"

        # –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ
        if not pd.isna(doctor.get('education')):
            profile += f"–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {doctor['education']}\n"

        if not pd.isna(doctor.get('education_add')):
            education_clean = re.sub('<[^<]+?>', '', str(doctor['education_add']))
            if education_clean.strip():
                profile += f"–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ: {education_clean[:200]}...\n"

        # –û–ø—ã—Ç –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
        if not pd.isna(doctor.get('detail_text')):
            detail_clean = re.sub('<[^<]+?>', '', str(doctor['detail_text']))
            profile += f"–û–ø–∏—Å–∞–Ω–∏–µ: {detail_clean[:300]}...\n"
        # –û—Ç–∑—ã–≤
        if not pd.isna(doctor.get('–æ—Ç–∑—ã–≤')) and doctor['–æ—Ç–∑—ã–≤'] != 'none':
            review_clean = re.sub('<[^<]+?>', '', str(doctor['–æ—Ç–∑—ã–≤']))
            if review_clean.strip():
                profile += f"–û—Ç–∑—ã–≤—ã: {review_clean[:250]}...\n"
        elif not pd.isna(doctor.get('reviews')) and doctor['reviews'] != 'none':
            # –ï—Å–ª–∏ –∫–æ–ª–æ–Ω–∫–∞ –Ω–∞–∑—ã–≤–∞–µ—Ç—Å—è 'reviews' –≤–º–µ—Å—Ç–æ '–æ—Ç–∑—ã–≤'
            review_clean = re.sub('<[^<]+?>', '', str(doctor['reviews']))
            if review_clean.strip():
                profile += f"–û—Ç–∑—ã–≤—ã: {review_clean[:250]}...\n"
        profile += "---\n"
        return profile

    def get_filtered_candidates(self, target_specialty: str, min_candidates: int = 5) -> Tuple[pd.DataFrame, str]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –∏ –∏—Ö –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–ª—è LLM"""
        filtered_df = self.filter_by_specialty(target_specialty)

        if filtered_df.empty:
            return pd.DataFrame(), ""

        st.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ {len(filtered_df)} –≤—Ä–∞—á–µ–π –ø–æ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ '{target_specialty}'")

        # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –¥–ª—è LLM
        candidates_profiles = ""
        for _, doctor in filtered_df.iterrows():
            candidates_profiles += self.prepare_doctor_profile(doctor)

        return filtered_df, candidates_profiles