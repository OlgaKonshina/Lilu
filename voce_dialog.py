import streamlit as st
import threading
import time
import os
from audio_text import text_to_ogg, recognize_audio
from audio_recording import load_audio
from complaints_collector import ComplaintsCollector
from ai_helper import generate_next_question

class VoiceDialog:
    def __init__(self):
        self.complaints_collector = ComplaintsCollector()
        self.is_active = False
        self.dialog_history = []

        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
        self.questions_folder = "audio/dialog_questions"
        self.answers_folder = "audio/dialog_answers"
        os.makedirs(self.questions_folder, exist_ok=True)
        os.makedirs(self.answers_folder, exist_ok=True)

    def start_dialog(self, initial_data=None):
        """–ó–∞–ø—É—Å–∫ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞ —Å –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
        self.is_active = True
        self.dialog_history = []

        # –ï—Å–ª–∏ –Ω–µ—Ç –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö - —Å–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ
        if initial_data is None:
            initial_data = {}

        self.complaints_collector.start_collection(initial_data)

        # –û–∑–≤—É—á–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ë–ï–ó –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é
        initial_info = self._compile_voice_intro(initial_data)
        if initial_info:
            self._speak(initial_info)  # –¢–æ–ª—å–∫–æ –æ–∑–≤—É—á–∫–∞
            time.sleep(2)

        # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–ª–æ–≥ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._run_dialog)
        thread.daemon = True
        thread.start()

    def _compile_voice_intro(self, initial_data):
        """–ö–æ–º–ø–∏–ª—è—Ü–∏—è –≤—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –æ–∑–≤—É—á–∫–∏"""
        parts = ["**–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!**<[huge]>–ú–µ–Ω—è –∑–æ–≤—É—Ç **–õ–∏–ª—É**, <[huge]> —è **–ø–æ–º–æ–≥—É** –≤–∞–º –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤—Ä–∞—á–∞.",
                 "–°–µ–π—á–∞—Å —è  –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ **—É—Ç–æ—á–Ω—è—é—â–∏—Ö** –≤–æ–ø—Ä–æ—Å–æ–≤."]

        return " ".join(parts)

    def _run_dialog(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –¥–∏–∞–ª–æ–≥–∞"""
        try:


            # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —á–µ—Ä–µ–∑ LLM
            while (self.is_active and
                   self.complaints_collector.is_active and
                   not self.complaints_collector.completed):

                current_question = self.complaints_collector.get_current_question()
                if current_question:
                    # –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    self._add_to_history("", current_question)
                    self._speak(current_question)
                    time.sleep(1)

                    # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                    self._add_to_history("", "–ì–æ–≤–æ—Ä–∏—Ç–µ —Å–µ–π—á–∞—Å...")
                    answer = self._listen(duration=5)

                    if answer and answer.strip():
                        self._add_to_history(" –í—ã", answer)
                        # –ü–µ—Ä–µ–¥–∞–µ–º –æ—Ç–≤–µ—Ç –≤ LLM
                        has_more_questions = self.complaints_collector.process_answer(answer.strip())

                        if not has_more_questions:
                            break
                    else:
                        self._add_to_history("", "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –æ—Ç–≤–µ—Ç. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

                time.sleep(1)

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self.is_active and self.complaints_collector.completed:
                self._add_to_history(" –õ–∏–ª—É", "–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é **–≤—Å—é –ø–æ–ª—É—á–µ–Ω–Ω—É—é** –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")
                self._speak("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é **–≤—Å—é** –ø–æ–ª—É—á–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é...")

                recommendation = self.complaints_collector.recommendation
                result_msg = f"–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}"
                self._add_to_history("üéØ –†–µ–∑—É–ª—å—Ç–∞—Ç", result_msg)
                self._speak(
                    f"–ù–∞ –æ—Å–Ω–æ–≤–µ **–≤–∞—à–∏—Ö —Å–∏–º–ø—Ç–æ–º–æ–≤** <[large]>–∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏, <[huge]>–º–æ—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {recommendation}")

                self._add_to_history("", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                self._speak("–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è **–∑–∞–≤–µ—Ä—à–µ–Ω–∞**. <[huge]>–°–ø–∞—Å–∏–±–æ!")

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞: {str(e)}"
            self._add_to_history(" –û—à–∏–±–∫–∞", error_msg)
            print(f"–û—à–∏–±–∫–∞ –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º –¥–∏–∞–ª–æ–≥–µ: {e}")
        finally:
            self.is_active = False

    def _speak(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            success = text_to_ogg(text, self.questions_folder)
            if not success:
                print("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∞—É–¥–∏–æ –≤–æ–ø—Ä–æ—Å")
        except Exception as e:
            print(f" –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")

    def _listen(self, duration=5):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            audio_file = load_audio(duration, self.answers_folder)
            if not audio_file:
                return None

            recognized_text = recognize_audio(audio_file)
            return recognized_text

        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None

    def _add_to_history(self, speaker, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        self.dialog_history.append(f"{speaker}: {message}")
        if 'voice_dialog_status' not in st.session_state:
            st.session_state.voice_dialog_status = []
        st.session_state.voice_dialog_status = self.dialog_history[-10:]

    def _speak_first_two_questions_immediately(self):
        """–ù–µ–º–µ–¥–ª–µ–Ω–Ω–∞—è –æ–∑–≤—É—á–∫–∞ –ø–µ—Ä–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            import time

            # –ñ–¥–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é —Å–±–æ—Ä—â–∏–∫–∞
            time.sleep(2)

            # –û–∑–≤—É—á–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å (–ø–µ—Ä–≤—ã–π)
            first_question = self.complaints_collector.get_current_question()
            if first_question:
                print(f"–û–∑–≤—É—á–∏–≤–∞—é –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å: {first_question}")
                self._speak(first_question)
                time.sleep(3)

            print(" –ü–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ–∑–≤—É—á–µ–Ω, –¥–∏–∞–ª–æ–≥ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è...")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∫–∏: {e}")

    def stop_dialog(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∏–∞–ª–æ–≥–∞"""
        self.is_active = False
        self.complaints_collector.stop_collection()

    def get_results(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–∏–∞–ª–æ–≥–∞"""
        return self.complaints_collector.get_results()

    def get_status(self):
        """–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–∏–∞–ª–æ–≥–∞"""
        if self.complaints_collector.completed:
            return "completed"
        elif self.is_active:
            return "active"
        else:
            return "stopped"

    @property
    def current_question(self):
        return self.complaints_collector.get_current_question()

    @property
    def recommendation(self):
        return self.complaints_collector.recommendation

    @property
    def consultation(self):
        return self.complaints_collector.consultation