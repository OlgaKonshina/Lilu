import streamlit as st
import threading
import time
import os
from audio_text import text_to_ogg, recognize_audio
from audio_recording import load_audio


class VoiceAdditionalQuestions:
    def __init__(self):
        self.is_active = False
        self.current_question = None
        self.answers = {}
        self.questions_completed = False

        # –ü–∞–ø–∫–∏ –¥–ª—è –∞—É–¥–∏–æ
        self.questions_folder = "audio/additional_questions"
        self.answers_folder = "audio/additional_answers"
        os.makedirs(self.questions_folder, exist_ok=True)
        os.makedirs(self.answers_folder, exist_ok=True)

        # –°–ø–∏—Å–æ–∫ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
        # –í —Å–ø–∏—Å–∫–µ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–¥–µ–ª–∞–µ–º –∏—Ö –∫–æ—Ä–æ—á–µ:
        self.questions = [
            {
                'key': 'patient_type',
                'text': "–ö–∞–∫–æ–π –≤—Ä–∞—á –Ω+—É–∂–µ–Ω**–≤–∞–º**<[huge]> –¥–µ—Ç—Å–∫–∏–π –∏–ª–∏ –≤–∑—Ä–æ—Å–ª—ã–π ?",

            },
            {
                'key': 'doctor_gender',
                'text': "–í–∞–∂–µ–Ω –ª–∏ **–ø–æ–ª** –≤—Ä–∞—á–∞?",

            },
            {
                'key': 'experience',
                'text': "–ö–∞–∫–∏–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ **–æ–ø—ã—Ç—É** –≤—Ä–∞—á–∞? <[large]>–ù–∞–ø—Ä–∏–º–µ—Ä: <[medium]>–º–æ–ª–æ–¥–æ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç <[medium]>–∏–ª–∏ –æ–ø—ã—Ç–Ω—ã–π –≤—Ä–∞—á .",

            },
            {
                'key': 'academic_degree',
                'text': "–ù—É–∂–Ω–∞ –ª–∏ **—É—á–µ–Ω–∞—è —Å—Ç–µ–ø–µ–Ω—å**? <[large]>–∏–ª–∏ —ç—Ç–æ –Ω–µ –≤–∞–∂–Ω–æ?",

            },
            {
                'key': 'appointment_type',
                'text': "–ö–∞–∫–æ–π **—Ç–∏–ø** –ø—Ä–∏–µ–º–∞ –Ω—É–∂–µ–Ω?<[huge]> –ü–µ—Ä–≤–∏—á–Ω—ã–π<[large]> –ø–æ–≤—Ç–æ—Ä–Ω—ã–π<[huge]> –∏–ª–∏ –ø—Ä–æ—Ñ–∏–ª–∞–∫—Ç–∏—á–µ—Å–∫–∏–π?",

            },
            {
                'key': 'previous_diagnosis',
                'text': "–ï—Å–ª–∏ –≤—ã **—É–∂–µ –±—ã–ª–∏** —É –≤—Ä–∞—á–∞-—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ —Ä–∞–Ω—å—à–µ, <[huge]>–∫–∞–∫–æ–π **–¥–∏–∞–≥–Ω–æ–∑ **–≤–∞–º –ø–æ—Å—Ç–∞–≤–∏–ª–∏?",

            },
            {
                'key': 'chronic_diseases',
                'text': "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å **—Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–µ** –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è?<[huge]>–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–∏–∞–±–µ—Ç<[huge]>, –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏—è,<[medium]> –∞—Å—Ç–º–∞<[huge]> –∏–ª–∏ –∞–ª–ª–µ—Ä–≥–∏–∏?",

            },
            {
                'key': 'additional_examinations',
                'text': "–ö–∞–∫–∏–µ **–æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è** –≤–∞–º –º–æ–≥—É—Ç –ø–æ–Ω–∞–¥–æ–±–∏—Ç—å—Å—è? <[huge]>–ù–∞–ø—Ä–∏–º–µ—Ä: <[medium]>–£–ó–ò <[medium]>–∏–ª–∏ –†–µ–Ω—Ç–≥–µ–Ω?",

            },
            {
                'key': 'special_requirements',
                'text':  "–ï—Å—Ç—å –ª–∏ —É –≤–∞—Å **–æ—Å–æ–±—ã–µ** –ø–æ–∂–µ–ª–∞–Ω–∏—è <[large]>–∏–ª–∏ —É—Ç–æ—á–Ω–µ–Ω–∏—è ?<[huge]>–ù–∞–ø—Ä–∏–º–µ—Ä: <[medium]>–∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫,<[medium]> –∏–ª–∏ –æ–Ω–ª–∞–π–Ω –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",

            }
        ]
    def start_questions(self):
        """–ó–∞–ø—É—Å–∫ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ —Å –≥–æ–ª–æ—Å–æ–º"""
        self.is_active = True
        self.questions_completed = False
        self.answers = {}
        self.current_question_index = 0

        # –ó–∞–ø—É—Å–∫–∞–µ–º –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        thread = threading.Thread(target=self._run_questions)
        thread.daemon = True
        thread.start()

    def _run_questions(self):
        """–û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤"""
        try:
            # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
            self._speak("–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ **—É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ **, <[medium]>–¥–ª—è –±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–≥–æ –ø–æ–¥–±–æ—Ä–∞ –≤—Ä–∞—á–∞.")
            time.sleep(2)

            # –ó–∞–¥–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
            for i, question_data in enumerate(self.questions):
                if not self.is_active:
                    break

                self.current_question_index = i
                self.current_question = question_data

                # –û–∑–≤—É—á–∏–≤–∞–µ–º –≤–æ–ø—Ä–æ—Å
                question_text = question_data['text']
                self._speak(question_text)
                self._add_to_history("ü§ñ –õ–∏–ª—É", question_text)
                time.sleep(1)



                # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
                self._add_to_history("üé§", "–ì–æ–≤–æ—Ä–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç...")
                answer = self._listen(duration=5)

                if answer and answer.strip():
                    self.answers[question_data['key']] = answer.strip()
                    self._add_to_history("üë§ –í—ã", answer.strip())
                else:
                    self._add_to_history("ü§ñ –õ–∏–ª—É", "–û—Ç–≤–µ—Ç –Ω–µ –ø–æ–ª—É—á–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")

                # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –≤–æ–ø—Ä–æ—Å–∞–º–∏
                time.sleep(1)

            # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            if self.is_active:
                completion_text = "**–°–ø–∞—Å–∏–±–æ** –∑–∞ –æ—Ç–≤–µ—Ç—ã! <[huge]>–í—Å–µ —É—Ç–æ—á–Ω—è—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã **–∑–∞–≤–µ—Ä—à–µ–Ω—ã**."
                self._speak(completion_text)
                self._add_to_history("‚úÖ", completion_text)
                self.questions_completed = True

        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –≤ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö: {str(e)}"
            self._add_to_history("‚ùå –û—à–∏–±–∫–∞", error_msg)
            print(f"–û—à–∏–±–∫–∞ –≤ —É—Ç–æ—á–Ω—è—é—â–∏—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö: {e}")
        finally:
            self.is_active = False

    def _speak(self, text):
        """–û–∑–≤—É—á–∏–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞"""
        try:
            success = text_to_ogg(text, self.questions_folder)
            if not success:
                print(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å: {text}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–µ–∑–∞ —Ä–µ—á–∏: {e}")
    def _add_to_history(self, speaker, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é"""
        if 'voice_additional_status' not in st.session_state:
            st.session_state.voice_additional_status = []
        st.session_state.voice_additional_status.append(f"{speaker}: {message}")

    def stop_questions(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤"""
        self.is_active = False
        self.current_question = None

    def get_answers(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤"""
        return self.answers

    def get_status(self):
        """–°—Ç–∞—Ç—É—Å –≤–æ–ø—Ä–æ—Å–æ–≤"""
        if self.questions_completed:
            return "completed"
        elif self.is_active:
            return "active"
        else:
           return "stopped"

    def _listen(self, duration=5):
        """–ü—Ä–æ—Å–ª—É—à–∏–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞"""
        try:
            print(f"üîä [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –ù–∞—á–∏–Ω–∞—é –∑–∞–ø–∏—Å—å {duration} —Å–µ–∫...")
            audio_file = load_audio(duration, self.answers_folder)

            if not audio_file:
                print("‚ùå [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø–∏—Å–∞—Ç—å –∞—É–¥–∏–æ")
                return None

            print(f"üîä [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –ê—É–¥–∏–æ –∑–∞–ø–∏—Å–∞–Ω–æ: {audio_file}")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
            if os.path.exists(audio_file):
                file_size = os.path.getsize(audio_file)
                print(f"üìä [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞: {file_size} –±–∞–π—Ç")

            recognized_text = recognize_audio(audio_file)
            print(f"üîä [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
            return recognized_text

        except Exception as e:
            print(f"‚ùå [–£–¢–û–ß–ù–Ø–Æ–©–ò–ï] –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}")
            return None
