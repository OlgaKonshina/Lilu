from config import YANDEX_API_KEY, YANDEX_FOLDER_ID
import os
import requests
from playsound import playsound

# –î–∞–Ω–Ω—ã–µ –¥–ª—è –Ø–Ω–¥–µ–∫—Å SpeechKit
API_KEY = YANDEX_API_KEY
FOLDER_ID = YANDEX_FOLDER_ID


def text_to_ogg(text: str, folder: str = "audio/questions") -> str:
    os.makedirs(folder, exist_ok=True)

    existing = [f for f in os.listdir(folder) if f.startswith("question_") and f.endswith(".ogg")]
    next_index = len(existing) + 1

    filename = os.path.join(folder, f"question_{next_index}.ogg")
    url = 'https://tts.api.cloud.yandex.net/speech/v1/tts:synthesize'
    headers = {'Authorization': f'Api-Key {API_KEY}'}

    data = {
        'folderId': FOLDER_ID,
        'text': text,
        'lang': 'ru-RU',
        'voice': 'oksana',
        'speed': '1.25',
        'format': 'oggopus',  # –§–æ—Ä–º–∞—Ç OGG Opus
        'sampleRateHertz': 48000,
    }

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
    response = requests.post(url, headers=headers, data=data)

    if response.status_code == 200:
        with open(filename, 'wb') as f:
            f.write(response.content)
            playsound(filename)
        return True
    else:
        return False


def recognize_audio(audio_file, language='ru-RU'):
    API_KEY = YANDEX_API_KEY
    FOLDER_ID = YANDEX_FOLDER_ID

    url = 'https://stt.api.cloud.yandex.net/speech/v1/stt:recognize'
    headers = {'Authorization': f'Api-Key {API_KEY}'}

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not os.path.exists(audio_file):
        print(f"–§–∞–π–ª {audio_file} –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return None

    try:
        # –ß–∏—Ç–∞–µ–º –∞—É–¥–∏–æ —Ñ–∞–π–ª
        with open(audio_file, 'rb') as f:
            audio_data = f.read()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(
            url,
            headers=headers,
            data=audio_data,
            params={
                'folderId': FOLDER_ID,
                'lang': language,
            }
        )

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200:
            result = response.json()
            return result.get('result', '')
        else:
            print(f"–û—à–∏–±–∫–∞ API: {response.status_code}")
            print(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            return None

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None


def recognize_audio(audio_file, language='ru-RU'):
    """–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ä–µ—á–∏ —Å –æ—Ç–ª–∞–¥–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    API_KEY = YANDEX_API_KEY
    FOLDER_ID = YANDEX_FOLDER_ID

    url = 'https://stt.api.cloud.yandex.net/speech/v1/stt:recognize'
    headers = {'Authorization': f'Api-Key {API_KEY}'}

    print(f"üîç –†–∞—Å–ø–æ–∑–Ω–∞—é –∞—É–¥–∏–æ: {audio_file}")

    if not os.path.exists(audio_file):
        print(f"–§–∞–π–ª –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {audio_file}")
        return None

    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = os.path.getsize(audio_file)

        if file_size == 0:
            return None

        with open(audio_file, 'rb') as f:
            audio_data = f.read()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–∞–Ω–Ω—ã—Ö
        if len(audio_data) > 1 * 1024 * 1024:
            print("–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π, –æ–±—Ä–µ–∑–∞–µ–º...")
            # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –Ω—É–∂–Ω–æ –æ–±—Ä–µ–∑–∞—Ç—å –∞—É–¥–∏–æ
            return "–∞—É–¥–∏–æ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ"

        response = requests.post(
            url,
            headers=headers,
            data=audio_data,
            params={
                'folderId': FOLDER_ID,
                'lang': language,
            },
            timeout=30
        )

        if response.status_code == 200:
            result = response.json()
            recognized_text = result.get('result', '')
            if recognized_text:
                print(f"‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–Ω–æ: {recognized_text}")
            else:
                print("–¢–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω")
            return recognized_text
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {response.status_code}")
            print(f"–î–µ—Ç–∞–ª–∏: {response.text}")
            return None

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–∞–π–ª–∞: {e}")
        return None
